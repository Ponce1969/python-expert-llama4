name: Release

# Workflow temporalmente desactivado hasta que esté listo para releases
on:
  # Commented out to disable automatic runs
  # push:
  #   tags:
  #     - 'v*'
  # Para ejecutar manualmente si es necesario
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
    
    - name: Generate changelog
      id: changelog
      run: |
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$PREVIOUS_TAG" ]; then
          git log --pretty=format:"* %s" > CHANGELOG.md
        else
          git log --pretty=format:"* %s" $PREVIOUS_TAG..HEAD > CHANGELOG.md
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        cat CHANGELOG.md >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    
    - name: Update Release with Changelog
      uses: actions/update-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
        body: |
          ## Cambios en esta versión
          ${{ env.CHANGELOG }}
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/chat_llama_groq-${{ env.VERSION }}.tar.gz
        asset_name: chat_llama_groq-${{ env.VERSION }}.tar.gz
        asset_content_type: application/gzip
